plugins {
    id 'java'
    id 'idea'
    id 'com.diffplug.spotless' version '5.5.1'
    id 'com.github.spotbugs' version '4.0.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group 'bio.terra'
version '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    invoker
}

dependencies {
    ext {
        googleFunctions = '1.0.4'
        googleFunctionsInvoker = '1.0.2'
        googleBigQuery = '1.131.1'
        slf4j = '1.7.30'
    }

    // This lets you make logging calls to SLF4J’s org.slf4j.Logger in the code.
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4j}"
    // This is either slf4j-log4j12.jar (for log4j logging),
    // slf4j-jdk14.jar (for Java logging),
    // slf4j-jcl.jar (if you’re using Commons logging)
    // or logback-classic.jar (for logback logging).
    // With the correct binding jar, SLF4J is able to interface between slf4j-api
    // and underlying logging implementation.
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: "${slf4j}"

    // Every function needs this dependency to get the Functions Framework API.
    implementation group: 'com.google.cloud.functions', name: 'functions-framework-api', version: "${googleFunctions}"

    // Google Cloud SDK needed for Streaming BQ
    implementation group: 'com.google.cloud', name: 'google-cloud-bigquery', version: "${googleBigQuery}"

    // To run function locally using Functions Framework's local invoker
    invoker group: 'com.google.cloud.functions.invoker', name: 'java-function-invoker', version: "${googleFunctionsInvoker}"

    // These dependencies are only used by the tests.
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

// For more info, please refer to https://cloud.google.com/functions/docs/first-java#gradle_1
// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('run.functionTarget') ?: '',
            '--port', project.findProperty('run.port') ?: 8080
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

// Deploy cloud function from a JAR
// Build and deploy an Uber JAR
// https://cloud.google.com/functions/docs/concepts/java-deploy#gradle
shadowJar {
    mergeServiceFiles()
}

compileJava.dependsOn spotlessApply
